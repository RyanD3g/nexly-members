generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------- S-Models ---------

model Student {
  id String @id @default(uuid())

  name     String?
  lastname String?
  email    String  @unique
  password String
  cpf      String? @unique
  phone    String? @unique
  sex      String?
  photo    String?
  bio      String?
  student  Boolean @default(true)

  delDate  String?
  code     String?
  codeDate String?

  address              Address?
  courses              Courses_Student[]
  tags                 Tags_by_liking[]
  favoriteLessons      Favorites[]
  notifications        Notifications_Students[]
  TicketSuport_Student TicketSuport_Student[]
  roomTicket           RoomForTicket[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id String @id @default(uuid())

  codeStreet String
  street     String
  number     String
  complement String?
  city       String
  uf         String

  student   Student @relation(fields: [studentId], references: [id])
  studentId String  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Courses_Student {
  id String @id @default(uuid())

  lastSeen  String  @default("00:00:00")
  completed Boolean @default(false)
  coursesId String

  student          Student @relation(fields: [studentCoursesId], references: [id])
  studentCoursesId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tags_by_liking {
  id String @id @default(uuid())

  categoryName String? @default("outros")

  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favorites {
  id String @id @default(uuid())

  nameLesson String
  lessonId   String

  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notifications_Students {
  id String @id @default(uuid())

  title    String
  content  String
  read     Boolean @default(false)
  timeLife String

  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --------- P-Models ---------

model Producer {
  id String @id @default(uuid())

  name            String?
  lastname        String?
  email           String  @unique
  password        String
  identity        String? @unique
  phone           String? @unique
  sex             String?
  photo           String?
  isProducer      Boolean @default(true)
  isAccountActive Boolean @default(true)

  delDate  String?
  code     String?
  codeDate String?

  courses       Courses_Producer[]
  notifications Notifications_Producer[]
  address       AddressForProducers?
  roomTicket    RoomForTicket[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AddressForProducers {
  id String @id @default(uuid())

  codeStreet String
  street     String
  number     String
  complement String?
  city       String
  uf         String

  producer   Producer @relation(fields: [producerId], references: [id])
  producerId String   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notifications_Producer {
  id String @id @default(uuid())

  title    String
  content  String
  isRead   Boolean?
  timeLife String

  producer   Producer @relation(fields: [producerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  producerId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --------- C-Models ---------

model Courses_Producer {
  id String @id @default(uuid())

  name           String
  urlThumbCourse String
  description    String
  categorysTag   String[] @default(["outros"])
  duration       String
  cretificate    Boolean  @default(true)
  delDate        String?

  producer   Producer? @relation(fields: [producerId], references: [id])
  producerId String?

  modules Modules_Courses[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Modules_Courses {
  id String @id @default(uuid())

  name        String
  description String?
  duration    String

  course   Courses_Producer @relation(fields: [courseId], references: [id])
  courseId String

  movies Movies_Modules[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Movies_Modules {
  id String @id @default(uuid())

  name            String
  urlMovie        String
  urlMaterial     String?
  description     String?
  duration        String?
  like            Int?
  Comments_movies Comments_movies[]

  module   Modules_Courses @relation(fields: [moduleId], references: [id])
  moduleId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comments_movies {
  id String @id @default(uuid())

  nameStudent String
  comment     String
  likes       Int?

  replyComment Reply_Comment[]

  movie   Movies_Modules @relation(fields: [movieId], references: [id])
  movieId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reply_Comment {
  id String @id @default(uuid())

  nameUser String
  comment  String
  likes    Int?

  comment_  Comments_movies @relation(fields: [commentId], references: [id])
  commentId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --------- T-Models ---------

model TicketSuport_Student {
  id String @id @default(uuid())

  name        String
  identity    String @unique
  number      String
  description String
  category    String
  priority    String
  status      String @default("Em aberto")

  ticketRoom RoomForTicket[]

  comment_  Student @relation(fields: [studentId], references: [id])
  studentId String

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  MessagesForRoom MessagesForRoom[]
}

model RoomForTicket {
  id String @id @default(uuid())

  nameRoom String

  messages MessagesForRoom[]

  ticket_  TicketSuport_Student @relation(fields: [ticketId], references: [id])
  ticketId String

  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  producer   Producer @relation(fields: [producerId], references: [id])
  producerId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MessagesForRoom {
  id String @id @default(uuid())

  userMessage    String
  contentMessage String

  ticket_  TicketSuport_Student @relation(fields: [ticketId], references: [id])
  ticketId String

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  RoomForTicket   RoomForTicket? @relation(fields: [roomForTicketId], references: [id])
  roomForTicketId String?
}
