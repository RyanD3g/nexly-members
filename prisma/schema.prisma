generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------- S-Models ---------

model Student {
  id String @id @default(uuid())

  name     String?
  lastname String?
  email    String  @unique
  password String
  cpf      String? @unique
  phone    String? @unique
  sex      String?
  photo    String?
  bio      String?
  student  Boolean @default(true)

  delDate  String?
  code     String?
  codeDate String?

  address              Address?
  courses              Courses_Student[]
  tags                 Tags_by_liking[]
  favoriteLessons      Favorites[]
  notifications        Notifications_Students[]
  TicketSuport_Student TicketSuport_Student[]
  posts                Posts[]
  Calendar             CalendarForStudents[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id String @id @default(uuid())

  codeStreet String
  street     String
  number     String
  complement String?
  city       String
  uf         String

  student   Student @relation(fields: [studentId], references: [id])
  studentId String  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Courses_Student {
  id String @id @default(uuid())

  lastSeen  String  @default("00:00:00")
  completed Boolean @default(false)
  coursesId String

  student          Student @relation(fields: [studentCoursesId], references: [id])
  studentCoursesId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tags_by_liking {
  id String @id @default(uuid())

  categoryName String? @default("outros")

  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favorites {
  id String @id @default(uuid())

  nameLesson String
  lessonId   String

  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notifications_Students {
  id String @id @default(uuid())

  title    String
  content  String
  read     Boolean @default(false)
  timeLife String

  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --------- P-Models ---------

model Producer {
  id String @id @default(uuid())

  name            String?
  lastname        String?
  email           String  @unique
  password        String
  identity        String? @unique
  phone           String? @unique
  sex             String?
  photo           String?
  isProducer      Boolean @default(true)
  isAccountActive Boolean @default(true)

  delDate  String?
  code     String?
  codeDate String?

  courses         Courses_Producer[]
  notifications   Notifications_Producer[]
  address         AddressForProducers?
  roomTicket      RoomForTicket[]
  posts           Posts[]
  polls           Post_Polls[]
  SchedulingEvent SchedulingEvent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AddressForProducers {
  id String @id @default(uuid())

  codeStreet String
  street     String
  number     String
  complement String?
  city       String
  uf         String

  producer   Producer @relation(fields: [producerId], references: [id])
  producerId String   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notifications_Producer {
  id String @id @default(uuid())

  title    String
  content  String
  isRead   Boolean?
  timeLife String

  producer   Producer @relation(fields: [producerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  producerId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post_Polls {
  id String @id @default(uuid())

  titleQuestion       String
  descriptionQuestion String?

  option    Option_Poll[]
  usersVote IdUserVote[]

  producer Producer @relation(fields: [pollsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pollsId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Option_Poll {
  id String @id @default(uuid())

  nameSelection String
  qntVotes      Int

  postPoll Post_Polls @relation(fields: [optionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  optionId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IdUserVote {
  id String @id @default(uuid())

  idUser String

  poll   Post_Polls @relation(fields: [pollId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pollId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --------- C-Models ---------

model Courses_For_Youtube {
  id String @id @default(uuid())

  name           String?
  urlThumbCourse String?
  description    String?
  categorysTag   String[] @default(["outros"])
  cretificate    Boolean  @default(true)
  delDate        String?

  // Configs for channel and playlists
  channelIdChanged  String?
  playlistIdChanged String?
  refreshToken      String?

  producer   Courses_Producer? @relation(fields: [courseYtId], references: [id])
  courseYtId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Courses_Producer {
  id String @id @default(uuid())

  name           String
  urlThumbCourse String
  description    String
  categorysTag   String[] @default(["outros"])
  duration       String
  cretificate    Boolean  @default(true)
  delDate        String?

  producer   Producer? @relation(fields: [producerId], references: [id])
  producerId String?

  modules         Modules_Courses?
  youtubePlaylist Courses_For_Youtube[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Modules_Courses {
  id String @id @default(uuid())

  name        String
  description String?
  duration    String

  course   Courses_Producer? @relation(fields: [courseId], references: [id])
  courseId String?           @unique

  movies Movies_Modules[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Movies_Modules {
  id String @id @default(uuid())

  name            String
  urlMovie        String
  urlMaterial     String?
  description     String?
  duration        String?
  like            Int?
  Comments_movies Comments_movies[]

  module   Modules_Courses @relation(fields: [moduleId], references: [id])
  moduleId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comments_movies {
  id String @id @default(uuid())

  nameStudent String
  comment     String
  likes       Int?

  replyComment Reply_Comment[]

  movie   Movies_Modules @relation(fields: [movieId], references: [id])
  movieId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reply_Comment {
  id String @id @default(uuid())

  nameUser String
  comment  String
  likes    Int?

  comment_  Comments_movies @relation(fields: [commentId], references: [id])
  commentId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --------- T-Models ---------

model TicketSuport_Student {
  id String @id @default(uuid())

  name        String
  identity    String @unique
  number      String
  description String
  category    String
  priority    String
  status      String @default("Em aberto")

  ticketRoom RoomForTicket[]

  comment_  Student @relation(fields: [studentId], references: [id])
  studentId String

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  MessagesForRoom MessagesForRoom[]
}

model RoomForTicket {
  id String @id @default(uuid())

  nameRoom String

  messages MessagesForRoom[]

  ticket_  TicketSuport_Student @relation(fields: [ticketId], references: [id])
  ticketId String

  producer   Producer @relation(fields: [producerId], references: [id])
  producerId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MessagesForRoom {
  id String @id @default(uuid())

  userMessage    String
  contentMessage String

  RoomForTicket          RoomForTicket?        @relation(fields: [roomForTicketId], references: [id])
  roomForTicketId        String?
  TicketSuport_Student   TicketSuport_Student? @relation(fields: [ticketSuport_StudentId], references: [id])
  ticketSuport_StudentId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --------- C-Models ---------

model Posts {
  id String @id @default(uuid())

  contentPost  String?
  momentPost   String?
  urlPhotoPost String?
  share        Int?

  Comments Comments_Post[]

  producer   Producer? @relation(fields: [producerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  producerId String?

  student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId String?

  likes Likes_By_Posts[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}

model Likes_By_Posts {
  id String @id @default(uuid())

  qntLikes Int
  userLike String

  post   Posts  @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comments_Post {
  id String @id @default(uuid())

  nameUserComment String
  contentComment  String
  userId          String
  userUrlPhoto    String

  reply ReplyComment_Posts[]

  post          Posts  @relation(fields: [commentPostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentPostId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReplyComment_Posts {
  id String @id @default(uuid())

  nameUserReplyComment String
  contentReplyComment  String
  userId               String
  userUrlPhoto         String

  comments Comments_Post @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  replyId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --------- E-Models ---------
model SchedulingEvent {
  id String @id @default(uuid())

  titleEvent            String
  dataOfEvent           String
  isHappened            Boolean @default(false)
  hourOfEvent           String
  descriptionAboutEvent String

  Calendar   CalendarForStudents? @relation(fields: [calendarId], references: [id])
  calendarId String?

  producer   Producer @relation(fields: [producerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  producerId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}

model CalendarForStudents {
  id String @id @default(uuid())

  Event SchedulingEvent[]

  Student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}
